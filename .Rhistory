library(roxygen2)
devtools::document()
devtools::use_vignette("fars_functions_vignette")
devtools::document()
devtools::document()
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2013:2014)
library(dplyr)
fars_summarize_years(2013:2014)
library(tidyr)
fars_summarize_years(2013:2014)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_summarize_years(2013:2014)
fars_summarize_years(2013:2014)
fars_summarize_years(2013:2014)
library(samplePackage2)
library(samplePackage2)
?`%>%`
library(samplePackage2)
library(samplePackage2)
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
library(samplePackage2)
rm(ls = ())
rm(list = ls())
library9samplePackage2)
library(samplePackage2)
make_filename(2013)
fars_read_years(2013)
library(samplePackage2)
make_filename(2013)
system.file("extdata", "accident_2013.csv.bz2", package = "samplePackage2")
library(samplePackage2)
?system.file
class(system.file("extdata", "accident_2013.csv.bz2", package = "samplePackage2"))
year = 2012
system.file("extdata", sprintf("accident_%d.csv.bz2", year), package = "samplePackage2")
year = 2013
system.file("extdata", sprintf("accident_%d.csv.bz2", year), package = "samplePackage2")
library(samplePackage2)
?fars_read
fars_read_years(2013)
fars_map_state(17, 2013)
library(testthat)
devtools::test()
?test_that
devtools::test()
library(samplePackage2)
devtools::test()
test_that("stuff", {
expect_that(fars_read("joe.csv"), throws_error())
})
library(samplePackage2)
devtools::test()
library(samplePackage2)
devtools::test()
library(samplePackage2)
devtools::test()
?test_that
library(samplePackage2)
devtools::test()
library(samplePackage2)
devtools::test()
library(samplePackage2)
devtools::test()
fars_read_years("2013")
library(samplePackage2)
devtools::test()
fars_read_years("two thousand thirteen")
class(fars_read_years("two thousand thirteen"))
library(samplePackage2)
devtools::test()
fars_summarize_years(2013:2014)
expect_that(fars_summarize_years(2013), prints_text)
expect_that(fars_summarize_years(2013), prints_text())
nrow(fars_summarize_years(2013))
expect_that(nrow(fars_summarize_years(2013)),
equals(12))
expect_that(ncol(fars_summarize_years(2013)),
equals(2))
expect_that(ncol(fars_summarize_years(2013:2015)),
equals(4))
fars_map_state(3, 2013)
expect_that(fars_map_state(3, 2012), throws_error())
class(fars_map_state(17, 2013))
class(fars_map_state(23, 2015))
fars_map_state(26, 2015)
fars_map_state(30, 2015)
fars_map_state(38, 2015)
fars_map_state(38, 2015)
fars_map_state(37, 2015)
fars_map_state(37, 2014)
state.num = 23
year = 2015
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter_(data, ~ STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
View(data.sub)
state.num = 37
year = 2015
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter_(data, ~ STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
max(data.sub$LATITUDE)
expect_that(is_true(max(data.sub$LATITUDE) > 40))
expect_that(max(data.sub$LATITUDE) > 40), is_true())
expect_that(max(data.sub$LATITUDE) > 40, is_true())
expect_that(max(data.sub$LATITUDE) > 40, is_false())
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 40
expect_that(max(data.sub$LATITUDE) > 40, is_false())
View(data.sub)
max(data.sub$LATITUDE)
?max
expect_that(is.na(max(data.sub$LATITUDE)), is_true())
expect_that(max(data.sub$LATITUDE, na.rm = TRUE) > 40, is_false())
library(samplePackage2)
devtools::test()
install.packages("maps")
install.packages("readr")
install.packages("tidyr")
library(samplePackage2)
install.packages("roxygen2")
install.packages("testthat")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("pdflatex")
install.packages("tools")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
